#include <iostream>
#include <iomanip>
#include <vector>
#include <string>
#include <cctype>
#include <fstream>
#include "myTestLib.h"
using namespace std;

enum enUserPermitions
{
    All = -1, ShowClientsList = 1, AddNewClient = 2, DeleteClient = 4, UpdateClient = 8, 
    FindClient = 16, Transactions = 32, ManageUsers = 64
};

struct stBankClients
{
    string accountNum, pinCode, name, phone;
    double accountBalance;
};

struct stUsers { string userName, passWord; short permitions = 0; };

const string clientsFileName = "bankClients.txt";

const string usersFileName = "users.txt";

stUsers currentUser;

void transactionsMenue();
void mainMenuScreen();
void manageUsersMenuScreen();

short readNumInRange(short from, short to)
{
    short n;
    cin >> n;
    while (n < from || n > to)
    {
        printf("\nPlease enter a number from %d to %d: ", from, to);
        cin >> n;
    }
    return n;
}

void printTitle(string title)
{
    cout << "\n------------------------------------------\n";
    cout << "\t" << title;
    cout << "\n------------------------------------------\n";
}

bool isClientExist(string accNum, vector<stBankClients>& vClients, stBankClients& client)
{
    for (stBankClients& c : vClients)
    {
        if (c.accountNum == accNum)
        {
            client = c;
            return true;
        }
    }
    return false;
}

stBankClients convertLineToRecord(string line, string delim)
{
    stBankClients client;
    vector<string> vString = tes::splitString(line, delim);
    client.accountNum = vString.at(0);
    client.pinCode = vString.at(1);
    client.name = vString.at(2);
    client.phone = vString.at(3);
    client.accountBalance = stod(vString.at(4));
    return client;
}

vector<stBankClients> loadClientsDataFromFile(string fileName)
{
    vector<stBankClients> vClients;
    fstream file;
    string line;
    stBankClients client;
    file.open(clientsFileName, ios::in);
    if (file.is_open())
    {
        while (getline(file, line))
        {
            client = convertLineToRecord(line, "#//#");
            vClients.push_back(client);
        }
        file.close();
    }
    return vClients;
}

stBankClients readData()
{
    vector<stBankClients> vClients = loadClientsDataFromFile(clientsFileName);
    stBankClients client;
    cout << "\nEnter account number? ";
    getline(cin >> ws, client.accountNum);
    while (isClientExist(client.accountNum, vClients, client))
    {
        cout << "\nclient with [" << client.accountNum << "] already exist, Enter another account number ";
        getline(cin, client.accountNum);
    }
    cout << "\nEnter PinCode? ";
    getline(cin, client.pinCode);
    cout << "\nEnter name? ";
    getline(cin, client.name);
    cout << "\nEnter phone? ";
    getline(cin, client.phone);
    cout << "\nEnter account balance? ";
    cin >> client.accountBalance;
    return client;
}

string convertRecordToLine(stBankClients client, string delim = "#//#")
{
    string line = "";

    line += client.accountNum + delim + client.pinCode + delim + client.name + delim;
    line += client.phone + delim + to_string(client.accountBalance);
    return line;
}

void addDataLineToFile(string fileName, string dataLine)
{
    fstream file;
    file.open(fileName, ios::out | ios::app);
    if (file.is_open())
    {
        file << dataLine << endl;
        file.close();
    }
}

void addNewClientTofile()
{
    printTitle("Add New Clients Screen");
    cout << "\nAdding New Client:\n\n";
    stBankClients client;
    client = readData();
    addDataLineToFile(clientsFileName, convertRecordToLine(client));
}

void addClients()
{
    char addMore = 'y';
    do
    {
        system("cls");
        addNewClientTofile();
        cout << "\nClient added successfully, Do you want to add more clients? ";
        cin >> addMore;
    } while (addMore == 'y' || addMore == 'Y');
}

void printClientRecord(stBankClients client)
{
    cout << "| " << left << setw(15) << client.accountNum;
    cout << "| " << left << setw(10) << client.pinCode;
    cout << "| " << left << setw(30) << client.name;
    cout << "| " << left << setw(15) << client.phone;
    cout << "| " << left << setw(10) << client.accountBalance;
    cout << endl;
}

void tableHeader(unsigned int numOfClients)
{
    printf("\n\t\t\t\tClient list of (%d) client(s).", numOfClients);
    cout << "\n--------------------------------------------------------------------------------------------\n";
    cout << "| " << setw(15) << left << "Account Number";
    cout << "| " << setw(10) << left << "PIN Code";
    cout << "| " << setw(30) << left << "Client Name";
    cout << "| " << setw(15) << left << "Phone";
    cout << "| " << setw(10) << left << "Balance";
    cout << "\n--------------------------------------------------------------------------------------------\n";
}

void showClientsData(string fileName)
{
    vector<stBankClients> vClients = loadClientsDataFromFile(fileName);
    system("cls");
    tableHeader(vClients.size());
    for (stBankClients& client : vClients)
    {
        printClientRecord(client);
    }
    cout << "\n--------------------------------------------------------------------------------------------\n";
}

void printClientCard(stBankClients client)
{
    cout << "\nThe following are the clients details:\n";
    cout << "\nAccount number: " << client.accountNum;
    cout << "\nPin Code: " << client.pinCode;
    cout << "\nName: " << client.name;
    cout << "\nPhone: " << client.phone;
    cout << "\nBalance: " << client.accountBalance;
    cout << endl;
}

void findClientByAccNum(string accountNumber)
{
    vector<stBankClients> vClients = loadClientsDataFromFile(clientsFileName);
    short index = -1;
    for (short i = 0; i < vClients.size(); ++i)
    {
        if (vClients.at(i).accountNum == accountNumber)
        {
            index = i;
            break;
        }
    }
    if (index >= 0)
    {
        printClientCard(vClients.at(index));
    }
    else
    {
        cout << "\nClient of account number " << accountNumber << " not found!\n";
    }
}

void saveClientsInFile(string fileName, vector<stBankClients> vClients)
{
    fstream file;
    file.open(fileName, ios::out);
    string dataLine = "";
    if (file.is_open())
    {
        for (stBankClients& c : vClients)
        {
            dataLine = convertRecordToLine(c);
            file << dataLine << endl;
        }
    }
}

void deleteClient(string accNum)
{
    vector<string> vLines;
    tes::loadFileContentToVector(clientsFileName, vLines);
    for (string& s : vLines)
    {
        if (accNum == s.substr(0, accNum.length()))
        {
            s = "";
            break;
        }
    }
    tes::saveVectorToFile(clientsFileName, vLines);
}

void deletionProcess(string accNum)
{
    vector<stBankClients> vClients = loadClientsDataFromFile(clientsFileName);
    stBankClients client;
    char ans = 'n';
    if (isClientExist(accNum, vClients, client))
    {
        printClientCard(client);
        cout << "\nAre you sure you want delete this client? y/n? ";
        cin >> ans;
        if (tolower(ans) == 'y')
        {
            deleteClient(accNum);
            cout << "\nClient deleted successfully\n";
        }
    }
    else
    {
        cout << "\nClient of account number " << accNum << " not found!\n";
    }
}

void showDeleteScreen()
{
    system("cls");
    printTitle("Delete Client Screen");
    deletionProcess(tes::readString("Please enter account number?"));
}

stBankClients changeClientRecord(string accNum)
{
    stBankClients client;
    client.accountNum = accNum;
    cout << "\nEnter Pin Code? ";
    getline(cin >> ws, client.pinCode);
    cout << "\nEnter Name? ";
    getline(cin, client.name);
    cout << "\nEnter Phone? ";
    getline(cin, client.phone);
    cout << "\nEnter Balance? ";
    cin >> client.accountBalance;
    return client;
}

void updateClientData(string accNum)
{
    vector<stBankClients> vClients = loadClientsDataFromFile(clientsFileName);
    stBankClients client;
    char ans = 'n';
    if (isClientExist(accNum, vClients, client))
    {
        printClientCard(client);
        cout << "\nAre you sure do you want to update this client? y/n? ";
        cin >> ans;
        if (tolower(ans) == 'y')
        {
            for (stBankClients& c : vClients)
            {
                if (c.accountNum == accNum)
                {
                    c = changeClientRecord(accNum);
                    break;
                }
            }
            saveClientsInFile(clientsFileName, vClients);
            cout << "\nClient updated successfully.\n";
        }
    }
    else
    {
        cout << "\nClient of account number " << accNum << " not found.\n";
    }
}

void showUpdateScreen()
{
    system("cls");
    printTitle("Update Client Info Screen");
    updateClientData(tes::readString("Please Enter Account Number?"));
}

void showFindClientScreen()
{
    system("cls");
    printTitle("Find Client Screen");
    findClientByAccNum(tes::readString("Please Enter Account Number?"));
}

void depositBalanceToClient(string accNum, vector<stBankClients> vClients, double amount)
{
    char ans = 'n';
    cout << "\nAre you sure do you want to perform this transaction? y/n? ";
    cin >> ans;
    if (tolower(ans) == 'y')
    {
        for (stBankClients& c : vClients)
        {
            if (c.accountNum == accNum)
            {
                c.accountBalance += amount;
                saveClientsInFile(clientsFileName, vClients);
                cout << "\nProcess Done Successfully, the client balance is " << c.accountBalance << endl;
                break;
            }
        }
    }
}

void depositProcess()
{
    system("cls");
    printTitle("Deposit Screen");
    string accNum = tes::readString("Please Enter Account Number?");
    vector<stBankClients> vClients = loadClientsDataFromFile(clientsFileName);
    stBankClients client;
    double depositAmount = 0;
    while (!isClientExist(accNum, vClients, client))
    {
        cout << "\nClient with " << accNum << " dose not exist, please enter another one? ";
        cin >> accNum;
    }
    printClientCard(client);
    cout << "\nEnter Deposit Amount? ";
    cin >> depositAmount;
    depositBalanceToClient(accNum, vClients, depositAmount);
}

void withdrawScreen()
{
    system("cls");
    printTitle("Withdraw Screen");
    string accNum = tes::readString("Please Enter Account Number?");
    vector<stBankClients> vClients = loadClientsDataFromFile(clientsFileName);
    stBankClients client;
    double withdrawAmount = 0;
    while (!isClientExist(accNum, vClients, client))
    {
        cout << "\nClient with " << accNum << " dose not exist, please enter another one? ";
        cin >> accNum;
    }
    printClientCard(client);
    cout << "\nEnter Withdraw Amount? ";
    cin >> withdrawAmount;
    while (withdrawAmount > client.accountBalance)
    {
        cout << "Amount exceeds the balance, you can withdraw up to: " << client.accountBalance;
        cout << endl << "Please enter another amount? ";
        cin >> withdrawAmount;
    }
    depositBalanceToClient(accNum, vClients, withdrawAmount * -1);
}

void totalBalanceScreen()
{
    vector<stBankClients> vClients = loadClientsDataFromFile(clientsFileName);
    double totalBalance = 0;
    system("cls");
    cout << "\n\t\t\tBalances List (" << vClients.size() << ") Client(s).";
    cout << "\n--------------------------------------------------------------------------------------------\n";
    cout << "| " << left << setw(15) << "Account Number";
    cout << "| " << left << setw(30) << "Client Name";
    cout << "| Balance";
    cout << "\n--------------------------------------------------------------------------------------------\n";
    for (stBankClients& c : vClients)
    {
        cout << "| " << setw(15) << left << c.accountNum;
        cout << "| " << setw(30) << left << c.name;
        cout << "| " << c.accountBalance << endl;
        totalBalance += c.accountBalance;
    }
    cout << "\n--------------------------------------------------------------------------------------------\n";
    cout << "\t\t\tTotal Balance = " << totalBalance << endl;
}

void goBackToTarnsactionsMenue()
{
    cout << "\n\nPress any key to go back to transactions menu...";
    system("pause>0");
    transactionsMenue();
}

void performTransactionChoise(short choise)
{
    switch (choise)
    {
    case 1:
        depositProcess();
        goBackToTarnsactionsMenue();
        break;
    case 2:
        withdrawScreen();
        goBackToTarnsactionsMenue();
        break;
    case 3:
        totalBalanceScreen();
        goBackToTarnsactionsMenue();
        break;
    case 4:
        mainMenuScreen();
    }
}

void transactionsMenue()
{
    system("cls");
    cout << "\n=============================================\n";
    cout << "\tTransactions Menu Screen";
    cout << "\n=============================================\n";
    cout << "\t[1] Deposit.\n";
    cout << "\t[2] Withdraw.\n";
    cout << "\t[3] Total Balance.\n";
    cout << "\t[4] Main Menu.";
    cout << "\n=============================================\n";
    cout << "Choose what do you want to do? [1 to 4]? ";
    performTransactionChoise(readNumInRange(1, 4));
}

void goBackToMainMenu()
{
    cout << "\n\nPress any key to go back to main menu...";
    system("pause>0");
    mainMenuScreen();
}

void accessDeniedMessage()
{
    system("cls");
    cout << "-----------------------------------------\n";
    cout << "Access Denied,\n";
    cout << "You don't have permition to do this,\n";
    cout << "Please contact your admin.\n";
    cout << "-----------------------------------------\n";
}

string converUserRecordToUserLine(stUsers user, string delim = "#//#")
{
    return user.userName + delim + user.passWord + delim + to_string(user.permitions);
}

stUsers convertUserLineToUserRecord(string line, string delim)
{
    vector<string> vUsers = tes::splitString(line, delim);
    stUsers user;
    user.userName = vUsers.at(0);
    user.passWord = vUsers.at(1);
    user.permitions = stoi(vUsers.at(2));
    return user;
}

vector<stUsers> loadUsersDataFromFile(string fileName)
{
    vector<stUsers> vUsers;
    fstream file;
    file.open(usersFileName, ios::in);
    if (file.is_open())
    {
        string line;
        stUsers user;
        while (getline(file, line))
        {
            user = convertUserLineToUserRecord(line, "#//#");
            vUsers.push_back(user);
        }
        file.close();
    }
    return vUsers;
}

void loadUsersDataToFile(string fileName, vector<stUsers> vUsers)
{
    fstream file;
    string dataLine;
    file.open(usersFileName, ios::out);
    if (file.is_open())
    {
        for (stUsers& user : vUsers)
        {
            dataLine = converUserRecordToUserLine(user);
            file << dataLine << endl;
        }
        file.close();
    }
}

bool isUserExist(string userName, string password, stUsers &user)
{
    vector<stUsers> vUsers = loadUsersDataFromFile(usersFileName);
    for (stUsers& u : vUsers)
    {
        if (u.userName == userName && u.passWord == password)
        {
            user = u;
            return true;
        }
    }
    return false;
}

void loginScreen(stUsers &user)
{   
    system("cls");
    printTitle("Login Screen");
    cout << "\nEnter username? ";
    getline(cin >> ws, user.userName);
    cout << "Enter password? ";
    getline(cin, user.passWord);
    while (!isUserExist(user.userName, user.passWord, user))
    {
        system("cls");
        printTitle("Login Screen");
        cout << "Invalid Username/Password!\n";
        cout << "Enter username? ";
        getline(cin >> ws, user.userName);
        cout << "Enter password? ";
        getline(cin, user.passWord);
    }
    mainMenuScreen();
}

void usersListScreen()
{
    vector<stUsers> vUsers = loadUsersDataFromFile(usersFileName);
    system("cls");
    cout << "\t\t\tUsers List (" << vUsers.size() << ") User(s)";
    cout << "\n--------------------------------------------------------------------------------------------\n";
    cout << "| " << setw(25) << left << "Username";
    cout << "| " << setw(25) << left << "Password";
    cout << "| Permitions";
    cout << "\n--------------------------------------------------------------------------------------------\n";
    for (stUsers& user : vUsers)
    {
        cout << "| " << setw(25) << left << user.userName;
        cout << "| " << setw(25) << left << user.passWord;
        cout << "| " << user.permitions << endl;
    }
    cout << "\n--------------------------------------------------------------------------------------------\n";
}

bool isUsernameExist(string username)
{
    vector<stUsers> vUsers = loadUsersDataFromFile(usersFileName);
    for (stUsers& user : vUsers)
    {
        if (user.userName == username)
            return true;
    }
    return false;
}

void setUserPermitions(stUsers &user,vector<stUsers> vUsers)
{
    char ans;
    cout << "Do you want to give full access?y/n? ";
    cin >> ans;
    if (tolower(ans) == 'y')
    {
        user.permitions = -1;       
    }
    else
    {
        cout << "\nDo you want to give access to:\n";
        cout << "Show client list?y/n? ";
        cin >> ans;
        if (tolower(ans) == 'y')
            user.permitions = 1;
        cout << "Add New Client?y/n? ";
        cin >> ans;
        if (tolower(ans) == 'y')
            user.permitions = user.permitions | 2;
        cout << "Delete Client?y/n? ";
        cin >> ans;
        if (tolower(ans) == 'y')
            user.permitions = user.permitions | 4;
        cout << "Update Client?y/n? ";
        cin >> ans;
        if (tolower(ans) == 'y')
            user.permitions = user.permitions | 8;
        cout << "Find Client?y/n? ";
        cin >> ans;
        if (tolower(ans) == 'y')
            user.permitions = user.permitions | 16;
        cout << "Transactions?y/n? ";
        cin >> ans;
        if (tolower(ans) == 'y')
            user.permitions = user.permitions | 32;
        cout << "Manage Users?y/n? ";
        cin >> ans;
        if (tolower(ans) == 'y')
            user.permitions = user.permitions | 64;
    }
}

void addUser()
{  
    stUsers user;
    vector<stUsers> vUsers = loadUsersDataFromFile(usersFileName);
    char ansForPermitions = 'n';
    cout << "Adding New User:\n";
    cout << "Enter Username? ";
    getline(cin >> ws, user.userName);
    while (isUsernameExist(user.userName))
    {
        cout << "User with [" << user.userName << "] is already exists, Enter another username? ";
        getline(cin, user.userName);
    }
    cout << "Enter Password? ";
    getline(cin, user.passWord);   
    setUserPermitions(user, vUsers);
    vUsers.push_back(user);
    loadUsersDataToFile(usersFileName, vUsers);   
}

void addNewUserScreen()
{
    char addMore = 'n';
    system("cls");
    printTitle("Add New User Screen");
    do
    {
        addUser();
        cout << "User added successfully, Do you want to add more users?y/n? ";
        cin >> addMore;
    } while (tolower(addMore) == 'y');
}

void printUserCard(string username, stUsers &user)
{
    vector<stUsers> vUsers = loadUsersDataFromFile(usersFileName);
    for (stUsers& u : vUsers)
    {
        if (u.userName == username)
        {
            user = u;
            break;
        }
    }
    cout << "\nThe following are the user details:\n";
    cout << "----------------------------------------\n";
    cout << "Username: " << user.userName << endl;
    cout << "Password: " << user.passWord << endl;
    cout << "Permitions: " << user.permitions << endl;
    cout << "----------------------------------------\n";
}

void deleteUser(stUsers user)
{
    vector<string> vUsers;
    string dataLine = converUserRecordToUserLine(user);
    tes::loadFileContentToVector(usersFileName, vUsers);
    for (string& s : vUsers)
    {
        if (s == dataLine)
        {
            s = "";
            break;
        }
    }
    tes::saveVectorToFile(usersFileName, vUsers);
}

void deleteUserScreen()
{
    vector<stUsers> vUsers = loadUsersDataFromFile(usersFileName);
    stUsers user;
    system("cls");
    printTitle("Delete User Screen");
    cout << "Enter Username? ";
    getline(cin >> ws, user.userName);
    if (!isUsernameExist(user.userName))
    {
        cout << "\nUser with username [" << user.userName << "] is not found!\n";
    }
    else
    {
        if (user.userName == "Admin")
            cout << "\nYou can not delete this user.\n";
        else
        {
            char confrim = 'n';
            printUserCard(user.userName, user);
            cout << "\nAre you sure do you want to delete this user?y/n? ";
            cin >> confrim;
            if (tolower(confrim) == 'y')
            {
                deleteUser(user);
                cout << "\nUser Deleted Successfully.\n";
                if (user.userName == currentUser.userName)
                    loginScreen(currentUser);
            }
        }
    }
}

void updateUser(string username)
{
    vector<stUsers> vUsers = loadUsersDataFromFile(usersFileName);
    for (stUsers &u : vUsers)
    {
        if (u.userName == username)
        {
            cout << "\nEnter password? ";
            getline(cin >> ws, u.passWord);
            setUserPermitions(u, vUsers);
            break;
        }
    }
    loadUsersDataToFile(usersFileName, vUsers);
}

void updateUserScreen()
{
    stUsers user;
    system("cls");
    printTitle("Update Users Screen");
    cout << "\nEnter username? ";
    getline(cin >> ws, user.userName);
    if (!isUsernameExist(user.userName))
    {
        cout << "\nUser with username [" << user.userName << "] is not found!\n";
    }
    else
    {
        char ans = 'n';
        printUserCard(user.userName, user);
        cout << "\nAre you sure do you want to update this user?y/n? ";
        cin >> ans;
        if (tolower(ans) == 'y')
        {
            updateUser(user.userName);
            cout << "\nUser updated successfully.\n";
        }
    }
}

void findUserScreen()
{
    stUsers user;
    system("cls");
    printTitle("Find Users Screen");
    cout << "\nEnter Username? ";
    getline(cin >> ws, user.userName);
    if (!isUsernameExist(user.userName))
        cout << "\nUser with usrname [" << user.userName << "] is not found!";
    else
        printUserCard(user.userName, user);
}

void goBackToMangeUsersScreen()
{
    cout << "\n\nPress any key to go back to mange users...";
    system("pause>0");
    manageUsersMenuScreen();
}

void performManageUsersChoise(short choise)
{
    switch (choise)
    {
    case 1:
        usersListScreen();
        goBackToMangeUsersScreen();
        break;
    case 2:
        addNewUserScreen();
        goBackToMangeUsersScreen();
        break;
    case 3:
        deleteUserScreen();
        goBackToMangeUsersScreen();
        break;
    case 4:
        updateUserScreen();
        goBackToMangeUsersScreen();
        break;
    case 5:
        findUserScreen();
        goBackToMangeUsersScreen();
        break;
    case 6 :
        mainMenuScreen();
    }
}

void manageUsersMenuScreen()
{
    system("cls");
    cout << "\n=============================================\n";
    cout << "\tManage Users Menu Screen";
    cout << "\n=============================================\n";
    cout << "\t[1] List Users.\n";
    cout << "\t[2] Add New User.\n";
    cout << "\t[3] Delete User.\n";
    cout << "\t[4] Update User.\n";
    cout << "\t[5] Find User.\n";
    cout << "\t[6] Main Menu.";
    cout << "\n=============================================\n";
    cout << "Choose what do you want to do? [1 to 6]? ";
    performManageUsersChoise(readNumInRange(1, 6));
}

void performMainMenuChoise(short option, stUsers &user)
{
    if (option == 1)
    {
        if ((user.permitions & enUserPermitions::ShowClientsList) != 0)
        {
            showClientsData(clientsFileName);
            goBackToMainMenu();
        }
        else
        {
            accessDeniedMessage();
            goBackToMainMenu();
        }
    }
    else if (option == 2)
    {
        if ((user.permitions & enUserPermitions::AddNewClient) != 0)
        {
            addClients();
            goBackToMainMenu();
        }
        else
        {
            accessDeniedMessage();
            goBackToMainMenu();
        }
    }
    else if (option == 3)
    {
        if ((user.permitions & enUserPermitions::DeleteClient) != 0)
        {
            showDeleteScreen();
            goBackToMainMenu();
        }
        else
        {
            accessDeniedMessage();
            goBackToMainMenu();
        }
    }
    else if (option == 4)
    {
        if ((user.permitions & enUserPermitions::UpdateClient) != 0)
        {
            showUpdateScreen();
            goBackToMainMenu();
        }
        else
        {
            accessDeniedMessage();
            goBackToMainMenu();
        }
    }
    else if (option == 5)
    {
        if ((user.permitions & enUserPermitions::FindClient) != 0)
        {
            showFindClientScreen();
            goBackToMainMenu();
        }
        else
        {
            accessDeniedMessage();
            goBackToMainMenu();
        }
    }
    else if (option == 6)
    {
        if ((user.permitions & enUserPermitions::Transactions) != 0)
        {
            transactionsMenue();
        }
        else
        {
            accessDeniedMessage();
            goBackToMainMenu();
        }
    }
    else if (option == 7)
    {
        if ((user.permitions & enUserPermitions::ManageUsers) != 0)
        {
            manageUsersMenuScreen();
        }
        else
        {
            accessDeniedMessage();
            goBackToMainMenu();
        }
    }
    else
    {
        system("cls");
        loginScreen(user);
    }
}

void mainMenuScreen()
{
    system("cls");
    cout << "\n=====================================================================\n";
    cout << "\t\t\tMain Menu Screen";
    cout << "\n=====================================================================\n";
    cout << "\t[1] Show client list.\n";
    cout << "\t[2] Add new client.\n";
    cout << "\t[3] Delete client.\n";
    cout << "\t[4] Update client info.\n";
    cout << "\t[5] Find client.\n";
    cout << "\t[6] Transactions Menue.\n";
    cout << "\t[7] Manage Users.\n";
    cout << "\t[8] Logout";
    cout << "\n=====================================================================\n";
    cout << "Choose what do you want to do? [1 to 8]? ";
    performMainMenuChoise(readNumInRange(1, 8), currentUser);
}

int main()
{   
    loginScreen(currentUser);
    system("pause>0");
    return 0;
}

